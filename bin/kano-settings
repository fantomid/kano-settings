#!/usr/bin/kano-splash loader-animation /usr/bin/env python

# kano-settings
#
# Copyright (C) 2014-2017 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Kano Settings executable


"""
 launches the application Terminal Quest at different points in the story

Usage:
  kano-settings [--plug=<socket-id>] [--id=<screen-id>|--label=<screen-label>|<screen>] [--onescreen]

Options:
   -h, --help                   Show this message.
   -p, --plug=<socket-id>       Launch application as a Gtk.Plug and point to the correct Socket.
   -l, --label=<screen-label>   Launch on the right screen based on the label
   -i, --id=<screen-id>         Launch on the right screen based on the number
   -o, --onescreen              Close kano-settings after launching one application

"""

import os
import sys
import docopt

from gi.repository import Gtk, GObject
GObject.threads_init()

if __name__ == '__main__' and __package__ is None:
    DIR_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if DIR_PATH != '/usr':
        sys.path.insert(1, DIR_PATH)
        LOCALE_PATH = os.path.join(DIR_PATH, 'locale')
    else:
        LOCALE_PATH = None

import kano_i18n.init
kano_i18n.init.install('kano-settings', LOCALE_PATH)

from kano_settings.main_window import generate_main_window


def main(plug=False, socket_id=0, screen_id=None, screen_label=None,
         onescreen=False):

    # Create window
    generate_main_window(
        plug=plug,
        screen_id=screen_id,
        screen_name=screen_label,
        socket_id=socket_id,
        onescreen=onescreen
    )

    # start the GTK+ processing loop
    Gtk.main()


if __name__ == "__main__":

    if os.environ['LOGNAME'] != 'root':
        exit("Error: Settings must be executed with root privileges")

    args = docopt.docopt(__doc__)

    socket_id = args['--plug']
    is_plug = (socket_id is not None)

    screen = args['<screen>']
    screen_id = args['--id']
    screen_label = args['--label']
    onescreen = args['--onescreen']

    if screen is not None:
        if screen.isdigit():
            screen_id = int(screen)
        else:
            screen_label = screen

    elif screen_id is not None and screen_id.isdigit():
        screen_id = int(screen_id)

    main(
        screen_id=screen_id,
        screen_label=screen_label,
        plug=is_plug,
        socket_id=socket_id,
        onescreen=onescreen
    )
